
import streamlit as st
import joblib
import pandas as pd
import numpy as np
import warnings

# Configurar warnings
warnings.filterwarnings("ignore", message="X does not have valid feature names")

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Predi√ß√£o de Doen√ßa Card√≠aca",
    page_icon="ü´Ä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Cache para carregar modelos
@st.cache_resource
def carregar_modelos():
    """Carregar o pr√©-processador e o modelo"""
    try:
        preprocessor = joblib.load("preprocessor.joblib")
        model = joblib.load("svm_model_smote.joblib")
        return preprocessor, model
    except FileNotFoundError as e:
        st.error(f"Erro ao carregar modelos: {e}")
        st.error("Certifique-se de que os arquivos preprocessor.joblib e svm_model_smote.joblib est√£o no diret√≥rio correto.")
        return None, None

def main():
    # T√≠tulo principal
    st.title("ü´Ä Sistema de Predi√ß√£o de Doen√ßa Card√≠aca")
    st.markdown("---")

    # Descri√ß√£o
    st.markdown("""
    Este sistema utiliza um modelo de Machine Learning (SVM) para prever o risco de doen√ßa card√≠aca 
    baseado em caracter√≠sticas cl√≠nicas do paciente.
    """)

    # Carregar modelos
    preprocessor, model = carregar_modelos()

    if preprocessor is None or model is None:
        st.stop()

    # Layout em duas colunas
    col1, col2 = st.columns([2, 1])

    with col1:
        st.header("üìã Dados do Paciente")

        # Criar formul√°rio
        with st.form("patient_form"):
            # Dados num√©ricos
            st.subheader("Dados Num√©ricos")
            col_num1, col_num2, col_num3 = st.columns(3)

            with col_num1:
                age = st.number_input("Idade", min_value=1, max_value=120, value=50, step=1)
                trestbps = st.number_input("Press√£o Arterial em Repouso (mmHg)", 
                                         min_value=50, max_value=250, value=120, step=1)

            with col_num2:
                chol = st.number_input("Colesterol S√©rico (mg/dl)", 
                                     min_value=100, max_value=600, value=200, step=1)
                thalch = st.number_input("Frequ√™ncia Card√≠aca M√°xima", 
                                       min_value=60, max_value=220, value=150, step=1)

            with col_num3:
                oldpeak = st.number_input("Depress√£o do ST induzida por exerc√≠cio", 
                                        min_value=0.0, max_value=10.0, value=1.0, step=0.1)

            st.markdown("---")

            # Dados categ√≥ricos
            st.subheader("Dados Categ√≥ricos")
            col_cat1, col_cat2 = st.columns(2)

            with col_cat1:
                sex = st.selectbox("Sexo", ["Male", "Female"])
                dataset = st.selectbox("Dataset", ["Cleveland", "Hungarian", "Switzerland", "VA"])
                cp = st.selectbox("Tipo de Dor no Peito", 
                                ["typical angina", "atypical angina", "non-anginal", "asymptomatic"])
                fbs = st.selectbox("A√ß√∫car no Sangue em Jejum > 120 mg/dl", [True, False])

            with col_cat2:
                restecg = st.selectbox("Resultados do ECG em Repouso", 
                                     ["normal", "st-t abnormality", "lv hypertrophy"])
                exang = st.selectbox("Angina Induzida por Exerc√≠cio", [True, False])
                slope = st.selectbox("Inclina√ß√£o do Segmento ST", 
                                   ["upsloping", "flat", "downsloping"])

            # Bot√£o de predi√ß√£o
            submitted = st.form_submit_button("üîç Realizar Predi√ß√£o", use_container_width=True)

        # Processar predi√ß√£o
        if submitted:
            # Preparar dados
            dados_paciente = {
                'age': [age],
                'trestbps': [trestbps],
                'chol': [chol],
                'thalch': [thalch],
                'oldpeak': [oldpeak],
                'sex': [sex],
                'dataset': [dataset],
                'cp': [cp],
                'fbs': [fbs],
                'restecg': [restecg],
                'exang': [exang],
                'slope': [slope]
            }

            # Ordem das colunas
            ordem_colunas = [
                'age', 'trestbps', 'chol', 'thalch', 'oldpeak',
                'sex', 'dataset', 'cp', 'fbs', 'restecg', 'exang', 'slope'
            ]

            # Criar DataFrame
            paciente_df = pd.DataFrame(dados_paciente, columns=ordem_colunas)

            try:
                # Transformar dados
                paciente_transformado = preprocessor.transform(paciente_df)

                # Fazer predi√ß√£o
                predicao = model.predict(paciente_transformado)
                probabilidades = model.predict_proba(paciente_transformado)
                prob_doenca = probabilidades[0][1]

                # Mostrar resultados na coluna 2
                with col2:
                    st.header("üìä Resultado da Predi√ß√£o")

                    # M√©trica de probabilidade
                    st.metric(
                        label="Probabilidade de Risco",
                        value=f"{prob_doenca * 100:.2f}%"
                    )

                    # Resultado categ√≥rico
                    if predicao[0] == 1:
                        st.error("‚ö†Ô∏è **ALTO RISCO** de doen√ßa card√≠aca detectado")
                        st.markdown("**Recomenda√ß√£o:** Procure um cardiologista imediatamente.")
                    else:
                        st.success("‚úÖ **BAIXO RISCO** de doen√ßa card√≠aca")
                        st.markdown("**Recomenda√ß√£o:** Mantenha h√°bitos saud√°veis e consultas regulares.")

                    # Barra de progresso visual
                    st.markdown("### N√≠vel de Risco")
                    if prob_doenca < 0.3:
                        st.progress(prob_doenca / 0.3 * 0.33)
                        st.markdown("üü¢ **Baixo Risco**")
                    elif prob_doenca < 0.7:
                        st.progress(0.33 + (prob_doenca - 0.3) / 0.4 * 0.34)
                        st.markdown("üü° **Risco Moderado**")
                    else:
                        st.progress(0.67 + (prob_doenca - 0.7) / 0.3 * 0.33)
                        st.markdown("üî¥ **Alto Risco**")

                # Mostrar dados do paciente
                st.markdown("---")
                st.subheader("üìã Resumo dos Dados Inseridos")

                # Criar colunas para exibir os dados de forma organizada
                col_dados1, col_dados2 = st.columns(2)

                with col_dados1:
                    st.markdown("**Dados Num√©ricos:**")
                    st.write(f"‚Ä¢ Idade: {age} anos")
                    st.write(f"‚Ä¢ Press√£o Arterial: {trestbps} mmHg")
                    st.write(f"‚Ä¢ Colesterol: {chol} mg/dl")
                    st.write(f"‚Ä¢ Freq. Card√≠aca M√°x: {thalch} bpm")
                    st.write(f"‚Ä¢ Depress√£o ST: {oldpeak}")

                with col_dados2:
                    st.markdown("**Dados Categ√≥ricos:**")
                    st.write(f"‚Ä¢ Sexo: {sex}")
                    st.write(f"‚Ä¢ Tipo de Dor: {cp}")
                    st.write(f"‚Ä¢ A√ß√∫car Alto: {'Sim' if fbs else 'N√£o'}")
                    st.write(f"‚Ä¢ Angina por Exerc√≠cio: {'Sim' if exang else 'N√£o'}")
                    st.write(f"‚Ä¢ Inclina√ß√£o ST: {slope}")

            except Exception as e:
                st.error(f"Erro na predi√ß√£o: {e}")

    # Sidebar com informa√ß√µes
    with st.sidebar:
        st.header("‚ÑπÔ∏è Informa√ß√µes")

        st.markdown("""
        ### Sobre o Sistema

        Este sistema utiliza um modelo SVM (Support Vector Machine) treinado com t√©cnica SMOTE 
        para balanceamento de dados.

        ### Como usar:
        1. Preencha todos os campos do formul√°rio
        2. Clique em "Realizar Predi√ß√£o"
        3. Analise o resultado e as recomenda√ß√µes

        ### ‚ö†Ô∏è Importante
        Este sistema √© apenas uma ferramenta de apoio. 
        **N√£o substitui a consulta m√©dica profissional.**
        """)

        st.markdown("---")
        st.markdown("### üìö Gloss√°rio")

        with st.expander("Termos M√©dicos"):
            st.markdown("""
            - **Angina**: Dor no peito por falta de oxig√™nio no cora√ß√£o
            - **ECG**: Eletrocardiograma 
            - **ST**: Segmento do ECG
            - **Colesterol S√©rico**: N√≠vel de colesterol no sangue
            - **mmHg**: Mil√≠metros de merc√∫rio (press√£o)
            - **mg/dl**: Miligramas por decilitro
            """)

if __name__ == "__main__":
    main()
